view(byStoryLists)
byStoryLists
typeof(byStoryLists)
# dataframe of all response lists by story
byStoryLists <- character()
for (a in storylist) {
byStoryLists[[a]] <- get_responses(a)
}
byStoryLists <- data.frame()
byStoryLists
# dataframe of all response lists by story
byStoryLists <- character()
for (a in storylist) {
byStoryLists[[a]] <- get_responses(a)
}
# dataframe of all response lists by story
byStoryLists <- list()
for (a in storylist) {
byStoryLists[[a]] <- get_responses(a)
}
byStoryLists <- data.frame()
byStoryLists
for (a in storylist) {
byStoryLists[[a]] <- get_responses(a)
}
# dataframe of all response lists by story
byStoryLists <- list()
for (a in storylist) {
byStoryLists[[a]] <- get_responses(a)
}
byStoryLists
view(byStoryLists)
# dataframe of all response lists by story
byStoryLists <- storylist
for (a in storylist) {
byStoryLists[[a]] <- get_responses(a)
}
# dataframe of all response lists by story
responses_by_story <- list()
for (a in storylist) {
responses_by_story[[a]] <- get_responses(a)
}
byStoryLists <- data.frame(x = storylist, y = responses_by_story)
length(storylist)
length(responses_by_story)
responses_by_story[[1]]
view(responses_by_story)
responses_by_story
# dataframe of all response lists by story
responses_by_story <- list()
for (a in storylist) {
responses_by_story <- get_responses(a)
}
for (a in storylist) {
responses_by_story[a] <- get_responses(a)
}
warnings()
# dataframe of all response lists by story
responses_by_story <- list()
for (a in storylist) {
responses_by_story[a] <- get_responses(a)
}
view(responses_by_story)
data("love_words_small")
view(love_words_small)
# VISUALIZE RESPONSES BY STORY
wordcloud_test <- ggplot(love_words_small, aes(label = word)) +
geom_text_wordcloud() +
theme_minimal()
wordcloud_test
byStoryLists
view(byStoryLists)
# dataframe of all response lists by story
responses_by_story <- list()
for (a in storylist) {
responses_by_story[a] <- get_responses(a)
}
byStoryLists <- data.frame(x = storylist, y = responses_by_story)
view(byStoryLists)
# dataframe of all response lists by story
responses_by_story <- list()
for (a in storylist) {
responses_by_story[[a]] <- get_responses(a)
}
byStoryLists <- data.frame(x = storylist, y = responses_by_story)
responses_by_story
view(responses_by_story)
str(responses_by_story)
responses_by_story[1]
responses_by_story[[1]]
responses_by_story[[0]]
summary(responses_by_story)
responses_by_story$storylist[1]
responses_by_story$storylist[[1]]
storylist
storylist[1]
storylist[[1]]
responses_by_story$restaurant
responses_by_story$(storylist[1])
responses_by_story$storylist[[1]]
storylist[[1]]
levels(storylist)
responses_by_story
responses_by_story$restaurant
byStoryResponse
# Load the data
df = read.csv("../data/Pilot/Live/tesnorming_pilot-trials.csv", header = TRUE)%>%
filter(slide_type != "bot_check")
subinfo = read.csv("../data/Pilot/Live/tesnorming_pilot-subject_information.csv", header = TRUE)
# DETERMINE MEAN COMPLETION TIME
mean((read.csv("../data/Pilot/Live/tesnorming_pilot-time_in_minutes.csv", header = TRUE))$time_in_minutes)
# HELPER SCRIPTS
dodge = position_dodge(.9)
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
# SANITY CHECK: SHOULD EQUAL 280
length(unique(df$workerid))
# MAKE EXCLUSIONS
wrong_responses <- df %>%
filter(tag == "exclusion" & response == "fail")
blacklist <- unique(wrong_responses$workerid)
df <- df %>%
filter(!(workerid %in% blacklist))
# CODE NAME CATEGORY
df$nameCategory <- factor(df$first %in% c("Trevon",
"Tyree",
"Deion",
"Marquis",
"Jermaine",
"Lamont",
"Tyrone",
"Deandre",
"Tremayne",
"Lamar",
"Kareem",
"Hakeem",
"Jamal",
"Rasheed",
"Deshawn"))
# Load the data
df = read.csv("../data/Pilot/Live/tesnorming_pilot-trials.csv", header = TRUE)%>%
filter(slide_type != "bot_check")
subinfo = read.csv("../data/Pilot/Live/tesnorming_pilot-subject_information.csv", header = TRUE)
# DETERMINE MEAN COMPLETION TIME
mean((read.csv("../data/Pilot/Live/tesnorming_pilot-time_in_minutes.csv", header = TRUE))$time_in_minutes)
# HELPER SCRIPTS
dodge = position_dodge(.9)
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
# SANITY CHECK: SHOULD EQUAL 280
length(unique(df$workerid))
# MAKE EXCLUSIONS
wrong_responses <- df %>%
filter(tag == "exclusion" & response == "fail")
# CODE NAME CATEGORY
df$nameCategory <- factor(df$first %in% c("Trevon",
"Tyree",
"Deion",
"Marquis",
"Jermaine",
"Lamont",
"Tyrone",
"Deandre",
"Tremayne",
"Lamar",
"Kareem",
"Hakeem",
"Jamal",
"Rasheed",
"Deshawn"))
# SANITY CHECK: TRUE AND FALSE SHOULD BE EQUAL
df %>%
filter(type != "exclusion") %>%
group_by(nameCategory) %>%
summarize(n = n())
levels(df$nameCategory) <- c("white", "black")
# RENAME COLUMNS
df <- df %>%
rename(stereotype = tag,
name = first)
# DROP IRRELEVANT COLUMNS
df <- subset(df, select = -c(audio, image, slide_number, slide_type, error, proliferate.condition))
# SET UP BASIC DATAFRAMES
critical_df <- filter(df, type == "critical")
filler_df <- filter(df, type == "filler")
view(critical_df)
length(unique(critical_df$workerid))
# SET UP DATAFRAMES BY STORY
storylist <- unique(filter(df, type == "critical")$story)
# SET UP DATAFRAMES BY STORY
storylist <- unique(critical_df$story)
byStoryResponse <- critical_df %>%
select(name, response, story, nameCategory) %>%
group_split(story)
byStoryResponse
view(byStoryResponse)
view(byStoryResponse[[1]])
typeof(byStoryResponse)
byStoryResponse <- critical_df %>%
select(name, response, story, nameCategory) %>%
group_keys(story)
byStoryResponse <- critical_df %>%
select(name, response, story, nameCategory) %>%
group_split(story)
byStoryResponse <- critical_df %>%
select(name, response, story, nameCategory) %>%
group_by(story, nameCategory) %>%
group_split(story)
byStoryResponse <- critical_df %>%
select(name, response, story, nameCategory) %>%
group_by(story, nameCategory) %>%
group_split(story) %>%
ungroup()
byStoryResponse <- critical_df %>%
select(name, response, story, nameCategory) %>%
group_by(story, nameCategory) %>%
group_split(story, nameCategory)
byStoryResponse <- critical_df %>%
select(name, response, story, nameCategory) %>%
group_split(story, nameCategory)
view(byStoryResponse)
view(byStoryResponse[[1]])
view(byStoryResponse[[1]])
byStoryResponse[[1]]$response
byStoryResponse$response
# VISUALIZE RESPONSES BY STORY
wordcloud_test <- ggplot(critical_df, aes(label = response)) +
geom_text_wordcloud() +
theme_minimal()
wordcloud_test
# VISUALIZE RESPONSES BY STORY
wordcloud_test <- ggplot(critical_df, aes(label = response, color = nameCategory)) +
geom_text_wordcloud() +
theme_minimal()
wordcloud_test
# VISUALIZE RESPONSES BY STORY
wordcloud_test <- ggplot(critical_df, aes(label = response, color = nameCategory)) +
geom_text_wordcloud() +
theme_minimal() +
facet_wrap(~story)
wordcloud_test
# VISUALIZE RESPONSES BY STORY
wordcloud_test <- ggplot(critical_df, aes(label = response, color = nameCategory)) +
geom_text_wordcloud() +
theme_minimal() +
facet_wrap(~story)
wordcloud_test
responses_by_story
view(responses_by_story)
str(responses_by_story)
responses_by_story$restaurant
get_responses(restaurant)
get_responses("restaurant")
# OBTAINING LIST OF RESPONSES BY STORY
get_responses <- function(prompt_name) {
response_list_white <- list()
response_list_black <- list()
for (i in (filter(df, story == prompt_name))$response) {
if (nameCategory == "white") {
response_list_white <- c(response_list_white, i)
} else if (nameCategory == "black") {
response_list_black <- c(response_list_black, i)
}
}
return(response_list_white, response_list_black)
}
get_responses("restaurant")
# OBTAINING LIST OF RESPONSES BY STORY
get_responses <- function(prompt_name) {
response_list_white <- list()
response_list_black <- list()
for (i in (filter(df, story == prompt_name))) {
if (nameCategory == "white") {
response_list_white <- c(response_list_white, i$response)
} else if (nameCategory == "black") {
response_list_black <- c(response_list_black, i$response)
}
}
return(response_list_white, response_list_black)
}
get_responses("restaurant")
view(filter(df, story == "restaurant"))
# OBTAINING LIST OF RESPONSES BY STORY
get_responses <- function(prompt_name) {
response_list_white <- list()
response_list_black <- list()
subframe <- filter(df, story == prompt_name)
for (i in subframe) {
if (nameCategory == "white") {
response_list_white <- c(response_list_white, i$response)
} else if (nameCategory == "black") {
response_list_black <- c(response_list_black, i$response)
}
}
return(response_list_white, response_list_black)
}
view(filter(df, story == prompt_name))
aaa <- filter(df, story == "blue car")
view(aaa)
for (i in aaa) {}
for (i in aaa) {print(i)}
# OBTAINING LIST OF RESPONSES BY STORY
get_responses <- function(prompt_name) {
response_list_white <- list()
response_list_black <- list()
subframe_white <- filter(df, story == prompt_name, nameCategory == "white")
subframe_black <- filter(df, story == prompt_name, nameCategory == "black")
for (i in subframe_white$response) {
response_list_white <- c(response_list_white, i)
}
for (j in subframe_black$response) {
response_list_black <- c(response_list_black, j)
}
return(response_list_white, response_list_black)
}
get_responses("restaurant")
# OBTAINING LIST OF RESPONSES BY STORY
get_responses <- function(prompt_name) {
response_list_white <- list()
response_list_black <- list()
subframe_white <- filter(df, story == prompt_name, nameCategory == "white")
subframe_black <- filter(df, story == prompt_name, nameCategory == "black")
for (i in subframe_white$response) {
response_list_white <- c(response_list_white, c(i, "white"))
}
for (j in subframe_black$response) {
response_list_black <- c(response_list_black, c(j, "black"))
}
return(c(response_list_white, response_list_black))
}
get_responses("restaurant")
aaaa <- get_responses("restaurant")
view(aaaa)
# OBTAINING LIST OF RESPONSES BY STORY
get_responses <- function(prompt_name) {
response_list_white <- list()
response_list_black <- list()
subframe_white <- filter(df, story == prompt_name, nameCategory == "white")
subframe_black <- filter(df, story == prompt_name, nameCategory == "black")
for (i in subframe_white$response) {
response_list_white <- c(response_list_white, c(i, "white"))
}
for (j in subframe_black$response) {
response_list_black <- c(response_list_black, c(j, "black"))
}
return(c(subframe_white$response, subframe_black$response))
}
aaaa <- get_responses("restaurant")
view(aaaa)
# OBTAINING LIST OF RESPONSES BY STORY
get_responses <- function(prompt_name) {
response_list_white <- list()
response_list_black <- list()
subframe_white <- filter(df, story == prompt_name, nameCategory == "white")
subframe_black <- filter(df, story == prompt_name, nameCategory == "black")
for (i in subframe_white$response) {
response_list_white <- c(response_list_white, c(i, "white"))
}
for (j in subframe_black$response) {
response_list_black <- c(response_list_black, c(j, "black"))
}
return(subframe_white$response)
}
aaaa <- get_responses("restaurant")
view(aaaa)
view(aaaa)
# FREQUENCY OF RESPONSE BY STORY
df <- df %>%
# OBTAINING LIST OF RESPONSES BY STORY
get_responses <- function(prompt_name) {
response_list_white <- list()
response_list_black <- list()
subframe_white <- filter(df, story == prompt_name, nameCategory == "white")
subframe_black <- filter(df, story == prompt_name, nameCategory == "black")
for (i in subframe_white$response) {
response_list_white <- c(response_list_white, i)
}
for (j in subframe_black$response) {
response_list_black <- c(response_list_black, j)
}
return(cbind(response_list_white, response_list_black))
}
# FREQUENCY OF RESPONSE BY STORY
df <- df %>%
# OBTAINING LIST OF RESPONSES BY STORY
get_responses <- function(prompt_name) {
response_list_white <- list()
response_list_black <- list()
subframe_white <- filter(df, story == prompt_name, nameCategory == "white")
subframe_black <- filter(df, story == prompt_name, nameCategory == "black")
for (i in subframe_white$response) {
response_list_white <- c(response_list_white, i)
}
for (j in subframe_black$response) {
response_list_black <- c(response_list_black, j)
}
return(cbind(response_list_white, response_list_black))
}
# FREQUENCY OF RESPONSE BY STORY
df <- df %>%
# OBTAINING LIST OF RESPONSES BY STORY
get_responses <- function(prompt_name) {
response_list_white <- list()
response_list_black <- list()
subframe_white <- filter(df, story == prompt_name, nameCategory == "white")
subframe_black <- filter(df, story == prompt_name, nameCategory == "black")
for (i in subframe_white$response) {
response_list_white <- c(response_list_white, i)
}
for (j in subframe_black$response) {
response_list_black <- c(response_list_black, j)
}
return(response_list_white)
}
# OBTAINING LIST OF RESPONSES BY STORY
get_responses <- function(prompt_name) {
response_list_white <- list()
response_list_black <- list()
subframe_white <- filter(df, story == prompt_name, nameCategory == "white")
subframe_black <- filter(df, story == prompt_name, nameCategory == "black")
for (i in subframe_white$response) {
response_list_white <- c(response_list_white, i)
}
for (j in subframe_black$response) {
response_list_black <- c(response_list_black, j)
}
return(response_list_white)
}
# OBTAINING LIST OF RESPONSES BY STORY
get_responses <- function(prompt_name) {
response_list_white <- list()
response_list_black <- list()
subframe_white <- filter(df, story == prompt_name, nameCategory == "white")
subframe_black <- filter(df, story == prompt_name, nameCategory == "black")
for (i in subframe_white$response) {
response_list_white <- c(response_list_white, i)
}
for (j in subframe_black$response) {
response_list_black <- c(response_list_black, j)
}
return(cbind(response_list_white, response_list_black))
}
aaaa <- get_responses("restaurant")
view(aaaa)
view(aaaa)
aaaa$response_list_white
aaaa
aaaa[[1]]
aaaa[[2]]
aaaa[[3]]
aaaa[response_list_white]
aaaa[[4]]
aaaa[[response_list_white]]
summary(aaaa)
typeof(aaaa)
aaaa[1]
length(aaaa)
aaaa[[1:(length(aaaa)/2)]]
length(aaaa)/2
aaaa[[1:2]]
aaaa[1:2]
aaaa[[1:2]]
aaaa[1:2]
aaaa[1:(length(aaaa)/2)]
aaaa[:(length(aaaa)/2)]
# dataframe of all response lists by story
responses_white <- c()
responses_black <- c()
for (a in storylist) {
subf <- get_responses(a)
responses_white <- c(responses_white, subf[1:(length(subf)/2)])
responses_black <- c(responses_black, subf[(length(subf)/2):(length(subf))])
}
view(responses_black)
aaaa
aaaa[1:2]
aaaa[1,2]
aaaa[1,1]
aaaa[1,]
aaaa[4,]
aaaa[2,]
aaaa[,1]
aaaa[2,]
aaaa[1,]
aaaa[,2]
view(aaaa[,2])
# FREQUENCY OF RESPONSE BY STORY
df2 <- df %>%
transform(freq_inStory = ave(seq(nrow(d)), response))
# FREQUENCY OF RESPONSE BY STORY
df2 <- df %>%
transform(freq_inStory = ave(seq(nrow(df)), response))
view(df2)
library(plyr)
count(critical_df, 'response')
count(critical_df, 'response')$freq
df3 <- critical_df %>%
df3$frequency <- count('response')$freq
df3 <- critical_df
df3$frequency <- count(df3, 'response')$freq
viewdf3)
view(df3)
count(critical_df, 'response')[1]
count(critical_df, 'response')[[1]]
mean(critical_df$seconds_elapsed)
mean(df$seconds_elapsed)
