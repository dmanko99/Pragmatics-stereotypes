"Latino/a/x Biracial (n=4)", "Unreported (n=1)", "White (n=93)")
#binned plot
subRaceBinPlot <- ggplot(bySubRace, aes(x=nameCategory, y=Mean, fill = stereotype)) +
facet_wrap(~ raceBin, labeller = labeller(binFacets)) +
#facet_wrap(~raceBin, scale = "free") +
theme_bw() +
#scale_fill_grey() +
scale_fill_manual("Item effect on\ncriminality\nstereotype", values = c("#00397A","#CCCCCC")) +
geom_bar(stat="identity",position = "dodge") +
#theme(axis.text.x=element_text(angle=0,hjust=1,vjust=1)) +
geom_errorbar(aes(ymin=YMin,ymax=YMax),size = 0.25,width= 0.025,position = dodge) +
#labs(x = "Stimulus Race", y = "Mean rating", fill = "Subject Race")+
labs(x = "Stimulus Race", y = "Mean rating")+
ylim(0, 85) +
ggtitle("Mean responses by subject's self-reported race")
subRaceBinPlot
byworkerPlot <- ggplot(byStereotypeNameCategoryWorker, aes(x=nameCategory, y=Mean, fill = stereotype)) +
facet_wrap(~workerid) +
theme_bw() +
#scale_fill_grey() +
scale_fill_manual("Item effect on\ncriminality\nstereotype", values = c("#00397A","#CCCCCC")) +
geom_bar(stat="identity",position = "dodge") +
theme(axis.text.x=element_text(angle=20,hjust=1,vjust=1)) +
geom_errorbar(aes(ymin=YMin,ymax=YMax),size = 0.25,width= 0.025,position = dodge) +
labs(x = "Race", y = "Mean rating", fill = "Stereotype")+
ggtitle("Mean response by individual participant")
byworkerPlot
byStereotypeNameCategoryStory <- df %>%
filter(type == "critical") %>%
group_by(nameCategory, stereotype, item) %>%
summarize(Mean = mean(response),
CILow =ci.low(response),
CIHigh =ci.high(response)) %>%
ungroup() %>%
mutate(YMin = Mean - CILow,
YMax = Mean + CIHigh)
#Repress condition
itemMeansR <- ggplot(filter(byStereotypeNameCategoryStory, stereotype == "repress"), aes(x=item, y=Mean, fill = nameCategory)) +
theme_bw() +
#scale_fill_grey() +
scale_fill_manual("Race of\nnormed name", values = c("#00397A","#CCCCCC")) +
geom_bar(stat="identity",position = "dodge") +
theme(axis.text.x=element_text(angle=70,hjust=1,vjust=1)) +
geom_errorbar(aes(ymin=YMin,ymax=YMax),size = 0.25,width= 0.025,position = dodge) +
ylim(0, 85) +
labs(x = "Presented story", y = "Mean rating", fill = "Race")+
ggtitle("Average response by items repressing criminality stereotype")
itemMeansR
#Evoke condition
itemMeansE <- ggplot(filter(byStereotypeNameCategoryStory, stereotype == "evoke"), aes(x=item, y=Mean, fill = nameCategory)) +
geom_hline(yintercept = mean(filter(byStereotypeNameCategoryStory, stereotype == "evoke")$Mean), color="gray") +
theme_bw() +
#scale_fill_grey() +
scale_fill_manual("Race of\nnormed name", values = c("#00397A","#CCCCCC")) +
geom_bar(stat="identity",position = "dodge") +
theme(axis.text.x=element_text(angle=70,hjust=1,vjust=1)) +
geom_errorbar(aes(ymin=YMin,ymax=YMax),size = 0.25,width= 0.025,position = dodge) +
ylim(0, 85) +
labs(x = "Presented story", y = "Mean rating", fill = "Race")+
ggtitle("Average response by items evoking criminality stereotype")
itemMeansE
#Repress condition
itemMeansR <- ggplot(filter(byStereotypeNameCategoryStory, stereotype == "repress"), aes(x=item, y=Mean, fill = nameCategory)) +
geom_hline(yintercept = mean(filter(byStereotypeNameCategoryStory, stereotype == "repress")$Mean), color="gray") +
theme_bw() +
#scale_fill_grey() +
scale_fill_manual("Race of\nnormed name", values = c("#00397A","#CCCCCC")) +
geom_bar(stat="identity",position = "dodge") +
theme(axis.text.x=element_text(angle=70,hjust=1,vjust=1)) +
geom_errorbar(aes(ymin=YMin,ymax=YMax),size = 0.25,width= 0.025,position = dodge) +
ylim(0, 85) +
labs(x = "Presented story", y = "Mean rating", fill = "Race")+
ggtitle("Average response by items repressing criminality stereotype")
itemMeansR
dfOrder <- mutate(df, orderHalf = ifelse(trial_num < 12, "First Half", "Second Half"))
byStereotypeNameCategoryOrder <- dfOrder %>%
filter(type == "critical") %>%
group_by(nameCategory, stereotype, orderHalf) %>%
summarize(Mean = mean(response),
CILow =ci.low(response),
CIHigh =ci.high(response)) %>%
ungroup() %>%
mutate(YMin = Mean - CILow,
YMax = Mean + CIHigh)
ordering <- ggplot(byStereotypeNameCategoryOrder, aes(x=nameCategory, y=Mean, fill = stereotype)) +
# facet_wrap(~kind, scales = "free") +
theme_bw() +
#scale_fill_grey() +
scale_fill_manual("Race of\nnormed name", values = c("#00397A","#CCCCCC")) +
geom_bar(stat="identity",position = "dodge") +
facet_wrap(~orderHalf) +
theme(axis.text.x=element_text(angle=20,hjust=1,vjust=1)) +
geom_errorbar(aes(ymin=YMin,ymax=YMax),size = 0.25,width= 0.025,position = dodge) +
labs(x = "Race", y = "Mean rating", fill = "Stereotype") +
ggtitle("Response means by order in the experiment")
ordering
#subject race
raceHist <- ggplot(subinfo, aes(x = race)) +
geom_histogram(stat = "count", color = "#CCCCCC", fill = "#CCCCCC") +
scale_x_discrete(labels = raceLabs) +
theme_bw() +
labs(x = "Race", y = "Frequency") +
theme(axis.text.x=element_text(angle=30,hjust=1,vjust=1)) +
ggtitle("Frequency of subjects' self-reported race")
sinfoRaceBin <- mutate(subinfo, raceBin = ifelse(race == "Asian", "Asian",
ifelse(race == "Asian, White", "Asian Biracial",
ifelse(race == "AA", "African American",
ifelse(race %in% c("AA, White", "Asian, AA"),
"African American Biracial",
ifelse(race == "Latino", "Latino/a/x",
ifelse(race == "Latino, White", "Latino/a/x Biracial",
ifelse(race == "White", "White",
"Unreported"))))))))
raceBinHist <- ggplot(sinfoRaceBin, aes(x = raceBin)) +
geom_histogram(stat = "count", color = "#CCCCCC", fill = "#CCCCCC") +
#scale_x_discrete(labels = raceLabs) +
theme_bw() +
labs(x = "Race", y = "Frequency") +
theme(axis.text.x=element_text(angle=30,hjust=1,vjust=1)) +
ggtitle("Frequency of subjects' self-reported race")
raceBinHist
#subject political affiliation
politicalHist <- ggplot(subinfo, aes(x = factor(affiliation))) +
geom_histogram(stat = "count", color = "#CCCCCC", fill = "#CCCCCC") +
scale_x_discrete(labels = affiliationLabs) +
theme_bw() +
labs(x = "Political Affiliation", y = "Frequency") +
theme(axis.text.x=element_text(angle=30,hjust=1,vjust=1)) +
ggtitle("Frequency of subjects' self-reported political affiliation")
#subject political affiliation
politicalHist <- ggplot(subinfo, aes(x = factor(affiliation))) +
geom_histogram(stat = "count", color = "#CCCCCC", fill = "#CCCCCC") +
scale_x_discrete(labels = affiliationLabs) +
theme_bw() +
labs(x = "Political Affiliation", y = "Frequency") +
theme(axis.text.x=element_text(angle=30,hjust=1,vjust=1)) +
ggtitle("Frequency of subjects' self-reported political affiliation")
politicalHist
dfPoliticalBin <- mutate(subinfo, affiliationBin = ifelse(affiliation %in% 0:2,
"Democrat",
ifelse(affiliation == 3,
"Independent",
ifelse(affiliation %in%
4:6, "Republican",
"Unreported"))))
politicalBinHist <- ggplot(mutate(subinfo, affiliationBin = ifelse(affiliation %in% 0:2,
"Democrat",
ifelse(affiliation == 3,
"Independent",
ifelse(affiliation %in%
4:6, "Republican",
"Unreported")))),
aes(x = factor(affiliationBin))) +
geom_histogram(stat = "count", color = c("#00397A", "#CCCCCC", "#B51700", "#000000"),
fill = c("#00397A", "#CCCCCC", "#B51700", "#000000")) +
scale_x_discrete(labels = affiliationBinLabs) +
theme_bw() +
labs(x = "Political Affiliation", y = "Frequency") +
theme(axis.text.x=element_text(angle=30,hjust=1,vjust=1)) +
ggtitle("Frequency of subjects' self-reported political affiliation")
dfPoliticalBin <- mutate(subinfo, affiliationBin = ifelse(affiliation %in% 0:2,
"Democrat",
ifelse(affiliation == 3,
"Independent",
ifelse(affiliation %in%
4:6, "Republican",
"Unreported"))))
politicalBinHist <- ggplot(mutate(subinfo, affiliationBin = ifelse(affiliation %in% 0:2,
"Democrat",
ifelse(affiliation == 3,
"Independent",
ifelse(affiliation %in%
4:6, "Republican",
"Unreported")))),
aes(x = factor(affiliationBin))) +
geom_histogram(stat = "count", color = c("#00397A", "#CCCCCC", "#B51700", "#000000"),
fill = c("#00397A", "#CCCCCC", "#B51700", "#000000")) +
scale_x_discrete(labels = affiliationBinLabs) +
theme_bw() +
labs(x = "Political Affiliation", y = "Frequency") +
theme(axis.text.x=element_text(angle=30,hjust=1,vjust=1)) +
ggtitle("Frequency of subjects' self-reported political affiliation")
politicalBinHist
summary(m_affiliation)
dfPoliticalBin <- mutate(subinfo, affiliationBin = ifelse(affiliation %in% 0:2,
"Democrat",
ifelse(affiliation == 3,
"Independent",
ifelse(affiliation %in%
4:6, "Republican",
"Unreported"))))
politicalBinHist <- ggplot(mutate(subinfo, affiliationBin = ifelse(affiliation %in% 0:2,
"Democrat",
ifelse(affiliation == 3,
"Independent",
ifelse(affiliation %in%
4:6, "Republican",
"Unreported")))),
aes(x = factor(affiliationBin))) +
geom_histogram(stat = "count", color = c("#00397A", "#CCCCCC", "#B51700", "#000000"),
fill = c("#00397A", "#CCCCCC", "#B51700", "#000000")) +
scale_x_discrete(labels = affiliationBinLabs) +
theme_bw() +
labs(x = "Political Affiliation", y = "Frequency") +
theme(axis.text.x=element_text(angle=30,hjust=1,vjust=1)) +
ggtitle("Frequency of subjects' self-reported political affiliation")
politicalBinHist
df
view(df)
dfFiller = read.csv("../data/SIS-trials.csv", header = TRUE)
library(tidyr)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(data.table)
theme_set(theme_bw())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
d = read.csv("ling245B/Manko245B_Project/analysis/01_experiment/data/SIS-trials.csv", header = TRUE)
library(dplyr)
library(tidyverse)
library(jsonlite)
library(bootstrap)
library(brms)
source("helpers.R")
theme_set(theme_bw())
options(mc.cores = parallel::detectCores())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load the data
df = read.csv("../data/SIS-trials.csv", header = TRUE) %>%
filter(slide_type != "bot_check")
# Load the data
df = read.csv("../data/SIS-trials.csv", header = TRUE) %>%
filter(slide_type != "bot_check")
# Load the data
df = read.csv("../data/SIS-trials.csv", header = TRUE) %>%
filter(slide_type != "bot_check")
df$response <- as.numeric(df$response) - 28
view(df)
dfFiller = read.csv("../data/SIS-trials.csv", header = TRUE) %>%
filter(slide_type != "bot_check") %>%
filter(type == "critical") %>%
dfFiller$response <- as.numeric(df$response) - 28
view(df)
dfFiller = read.csv("../data/SIS-trials.csv", header = TRUE) %>%
filter(slide_type != "bot_check") %>%
filter(type == "filler")
dfFiller$response <- as.numeric(df$response) - 28
dfFiller = read.csv("../data/SIS-trials.csv", header = TRUE) %>%
filter(slide_type != "bot_check") %>%
filter(type == "filler")
dfFiller$response <- as.numeric(dfFiller$response) - 28
view(dfFiller)
nameCategory <- factor(dfFiller$first %in% c("Trevon",
"Tyree",
"Deion",
"Marquis",
"Jermaine",
"Lamont",
"Tyrone",
"Deandre",
"Tremayne",
"Lamar",
"Kareem",
"Hakeem",
"Jamal",
"Rasheed",
"Deshawn"))
dfFiller <- dfFiller %>%
rename(stereotype = tag,
item = story,
name = first)
byStereotypeNameCategoryFiller <- dfFiller %>%
group_by(nameCategory, stereotype, item) %>%
summarize(Mean = mean(response),
CILow =ci.low(response),
CIHigh =ci.high(response)) %>%
ungroup() %>%
mutate(YMin = Mean - CILow,
YMax = Mean + CIHigh)
dfFiller = read.csv("../data/SIS-trials.csv", header = TRUE) %>%
filter(slide_type != "bot_check") %>%
filter(type == "filler")
dfFiller$response <- as.numeric(dfFiller$response) - 28
nameCategory <- factor(dfFiller$first %in% c("Trevon",
"Tyree",
"Deion",
"Marquis",
"Jermaine",
"Lamont",
"Tyrone",
"Deandre",
"Tremayne",
"Lamar",
"Kareem",
"Hakeem",
"Jamal",
"Rasheed",
"Deshawn"))
levels(dfFiller$nameCategory) <- c("white", "black")
# MAKE EXCLUSIONS
wrong_responses <- df %>%
filter((tag == "exclusion_wrong" & response > 50) | (tag == "exclusion_right" && response < 50))
dfFiller <- dfFiller %>%
filter(!(workerid %in% blacklist))
df <- df %>%
filter(!(workerid %in% blacklist))
# MAKE EXCLUSIONS
wrong_responses <- df %>%
filter((tag == "exclusion_wrong" & response > 50) | (tag == "exclusion_right" && response < 50))
blacklist <- unique(wrong_responses$workerid)
df <- df %>%
filter(!(workerid %in% blacklist))
dfFiller <- dfFiller %>%
filter(!(workerid %in% blacklist))
nameCategory <- factor(dfFiller$first %in% c("Trevon",
"Tyree",
"Deion",
"Marquis",
"Jermaine",
"Lamont",
"Tyrone",
"Deandre",
"Tremayne",
"Lamar",
"Kareem",
"Hakeem",
"Jamal",
"Rasheed",
"Deshawn"))
view(dfFiller)
levels(dfFiller$nameCategory) <- c("white", "black")
levels(df$nameCategory) <- c("white", "black")
nameCategory <- factor(dfFiller$first %in% c("Trevon",
"Tyree",
"Deion",
"Marquis",
"Jermaine",
"Lamont",
"Tyrone",
"Deandre",
"Tremayne",
"Lamar",
"Kareem",
"Hakeem",
"Jamal",
"Rasheed",
"Deshawn"))
dfFiller <- dfFiller %>%
rename(stereotype = tag,
item = story,
name = first)
levels(dfFiller$nameCategory) <- c("white", "black")
dfFiller <- dfFiller %>%
rename(stereotype = tag,
item = story,
name = first)
dfFiller <- dfFiller %>%
rename(stereotype = tag,
item = story,
name = first)
nameCategory <- factor(dfFiller$first %in% c("Trevon",
"Tyree",
"Deion",
"Marquis",
"Jermaine",
"Lamont",
"Tyrone",
"Deandre",
"Tremayne",
"Lamar",
"Kareem",
"Hakeem",
"Jamal",
"Rasheed",
"Deshawn"))
levels(dfFiller$nameCategory) <- c("white", "black")
nameCategory <- factor(dfFiller$first %in% blacknames)
blacknames = list("Trevon", "Tyree", "Deion", "Marquis", "Jermaine", "Lamont", "Tyrone", "Deandre", "Tremayne", "Lamar", "Kareem", "Hakeem", "Jamal", "Rasheed", "Deshawn")
nameCategory <- factor(dfFiller$first %in% blacknames)
levels(dfFiller$nameCategory) <- c("white", "black")
# MAKE EXCLUSIONS
wrong_responses <- df %>%
filter((tag == "exclusion_wrong" & response > 50) | (tag == "exclusion_right" && response < 50))
blacklist <- unique(wrong_responses$workerid)
df <- df %>%
filter(!(workerid %in% blacklist))
# CODE NAME CATEGORY
df$nameCategory <- factor(df$first %in% c("Trevon",
"Tyree",
"Deion",
"Marquis",
"Jermaine",
"Lamont",
"Tyrone",
"Deandre",
"Tremayne",
"Lamar",
"Kareem",
"Hakeem",
"Jamal",
"Rasheed",
"Deshawn"))
# SANITY CHECK: TRUE AND FALSE SHOULD BE EQUAL
df %>%
filter(type != "exclusion") %>%
group_by(nameCategory) %>%
summarize(n = n())
levels(df$nameCategory) <- c("white", "black")
dfFiller %>%
filter(type != "exclusion") %>%
group_by(nameCategory) %>%
summarize(n = n())
dfFiller$nameCategory <- factor(dfFiller$first %in% blacknames)
dfFiller = read.csv("../data/SIS-trials.csv", header = TRUE) %>%
filter(slide_type != "bot_check") %>%
filter(type == "filler")
dfFiller$response <- as.numeric(dfFiller$response) - 28
dfFiller <- dfFiller %>%
filter(!(workerid %in% blacklist))
dfFiller$nameCategory <- factor(dfFiller$first %in% blacknames)
dfFiller %>%
filter(type != "exclusion") %>%
group_by(nameCategory) %>%
summarize(n = n())
levels(dfFiller$nameCategory) <- c("white", "black")
dfFiller <- dfFiller %>%
rename(stereotype = tag,
item = story,
name = first)
view(dfFiller)
byStereotypeNameCategoryFiller <- dfFiller %>%
group_by(nameCategory, stereotype, item) %>%
summarize(Mean = mean(response),
CILow =ci.low(response),
CIHigh =ci.high(response)) %>%
ungroup() %>%
mutate(YMin = Mean - CILow,
YMax = Mean + CIHigh)
# HELPER SCRIPTS
dodge = position_dodge(.9)
theta <- function(x,xdata,na.rm=T) {mean(xdata[x],na.rm=na.rm)}
ci.low <- function(x,na.rm=T) {
mean(x,na.rm=na.rm) - quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.025,na.rm=na.rm)}
ci.high <- function(x,na.rm=T) {
quantile(bootstrap(1:length(x),1000,theta,x,na.rm=na.rm)$thetastar,.975,na.rm=na.rm) - mean(x,na.rm=na.rm)}
byStereotypeNameCategoryFiller <- dfFiller %>%
group_by(nameCategory, stereotype, item) %>%
summarize(Mean = mean(response),
CILow =ci.low(response),
CIHigh =ci.high(response)) %>%
ungroup() %>%
mutate(YMin = Mean - CILow,
YMax = Mean + CIHigh)
fillerMeansLow <- ggplot(filter(byStereotypeNameCategoryFiller, stereotype == "filler_lowbias"), aes(x=item, y=Mean, fill = nameCategory)) +
geom_hline(yintercept = mean(filter(byStereotypeNameCategoryStory, stereotype == "filler_lowbias")$Mean), color="gray") +
theme_bw() +
scale_fill_manual("Race of\nnormed name", values = c("#00397A","#CCCCCC")) +
geom_bar(stat="identity",position = "dodge") +
theme(axis.text.x=element_text(angle=70,hjust=1,vjust=1)) +
geom_errorbar(aes(ymin=YMin,ymax=YMax),size = 0.25,width= 0.025,position = dodge) +
ylim(0, 85) +
labs(x = "Presented story", y = "Mean rating", fill = "Race")+
ggtitle("Average response by low-biased filler items")
fillerMeansLow <- ggplot(filter(byStereotypeNameCategoryFiller, stereotype == "filler_lowbias"), aes(x=item, y=Mean, fill = nameCategory)) +
geom_hline(yintercept = mean(filter(byStereotypeNameCategoryFiller, stereotype == "filler_lowbias")$Mean), color="gray") +
theme_bw() +
scale_fill_manual("Race of\nnormed name", values = c("#00397A","#CCCCCC")) +
geom_bar(stat="identity",position = "dodge") +
theme(axis.text.x=element_text(angle=70,hjust=1,vjust=1)) +
geom_errorbar(aes(ymin=YMin,ymax=YMax),size = 0.25,width= 0.025,position = dodge) +
ylim(0, 85) +
labs(x = "Presented story", y = "Mean rating", fill = "Race")+
ggtitle("Average response by low-biased filler items")
fillerMeansLow
fillerMeansHigh <- ggplot(filter(byStereotypeNameCategoryFiller, stereotype == "filler_highbias"), aes(x=item, y=Mean, fill = nameCategory)) +
geom_hline(yintercept = mean(filter(byStereotypeNameCategoryFiller, stereotype == "filler_highbias")$Mean), color="gray") +
theme_bw() +
scale_fill_manual("Race of\nnormed name", values = c("#00397A","#CCCCCC")) +
geom_bar(stat="identity",position = "dodge") +
theme(axis.text.x=element_text(angle=70,hjust=1,vjust=1)) +
geom_errorbar(aes(ymin=YMin,ymax=YMax),size = 0.25,width= 0.025,position = dodge) +
ylim(0, 85) +
labs(x = "Presented story", y = "Mean rating", fill = "Race")+
ggtitle("Average response by high-biased filler items")
itemMeansE
fillerMeansHigh
fillerMeansLow
fillerMeansHigh
# Load the data
df = read.csv("../data/Pilot/linguistics_study_fill_in_the_blank-trials.csv", header = TRUE)%>%
filter(slide_type != "bot_check")
library(dplyr)
library(tidyverse)
library(jsonlite)
library(bootstrap)
library(brms)
source("helpers.R")
theme_set(theme_bw())
options(mc.cores = parallel::detectCores())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Load the data
df = read.csv("../data/Pilot/linguistics_study_fill_in_the_blank-trials.csv", header = TRUE)%>%
filter(slide_type != "bot_check")
subinfo = read.csv("../data/Pilot/linguistics_study_fill_in_the_blank-subject_information.csv", header = TRUE)
view(df)
# DETERMINE MEAN COMPLETION TIME
mean(df$Answer.time_in_minutes)
# Load the data
df = read.csv("../data/Pilot/tesnorming-trials.csv", header = TRUE)%>%
filter(slide_type != "bot_check")
subinfo = read.csv("../data/Pilot/tesnorming-subject_information.csv", header = TRUE)
view(df)
